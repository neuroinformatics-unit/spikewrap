
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery_builds/tutorials/02_managing_configs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_builds_tutorials_02_managing_configs.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_builds_tutorials_02_managing_configs.py:


.. _configs-tutorial:

Managing ``configs``
====================

.. note::
    This is a long-form tutorial on ``config`` management. See :ref:`here <configs-howto>` for a quick how-to.

In ``spikewrap``, ``configs`` encode the preprocessing and sorting settings for a pipeline.
The emphasis is on convenient sharing of pipelines, while allowing flexibility for prototyping.

All ``configs`` in ``spikewrap`` map directly to underlying
`SpikeInterface functions <https://spikeinterface.readthedocs.io/en/stable/api.html>`_.

To use the ``configs``, they are passed to processing functions (e.g. :class:`spikewrap.Session.preprocess`),
in one of three ways:

**config name**:
    A keyword to a saved confgiuration e.g. ``"neuropixels+kilosort2_5"`` (this comes with ``spikewrap``).
**dictionary**:
    A ``dict`` with ``"preprocessing"`` and ``"sorting"`` keys (more details below).
**.yaml**:
    A YAML file, which is the ``configs`` dictionary dumped to file.

In this tutorial we will cover how to run processing steps with configs,
as well as how to make, share and save your own pipelines.

.. GENERATED FROM PYTHON SOURCE LINES 33-45

``configs`` as a name
---------------------
The easiest way to manage already-established ``configs`` is to
pass a keyword that refers to a previously saved pipeline.

For example, we can use the ``"neuropixels+kilosort2_5"``  in :class:`spikewrap.Session.preprocess`:

.. code-block:

    session.preprocess("neuropixels+kilosort2_5", ...)

and print the underlying steps with:

.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: Python


    import spikewrap as sw

    sw.show_configs("neuropixels+kilosort2_5")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    The preprocessing options are: {
        "1": [
            "phase_shift",
            {}
        ],
        "2": [
            "bandpass_filter",
            {
                "freq_max": 6000,
                "freq_min": 300
            }
        ],
        "3": [
            "common_reference",
            {
                "operator": "median",
                "reference": "global"
            }
        ]
    }


    The sorting options are: {
      "kilosort2_5": {
        "car": false,
        "freq_min": 150
      }
    }




.. GENERATED FROM PYTHON SOURCE LINES 51-55

It is possible to create and share your own keyword configs. Under the hood,
these are ``.yaml`` files that hold a python dictionary representation of the steps.
These are stored in a dedicated path, (``spikewrap`` in your user directory), which
you can find with:

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python


    sw.get_configs_path()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PosixPath('/home/runner/spikewrap/configs')



.. GENERATED FROM PYTHON SOURCE LINES 59-60

and see what configs you have available at this path:

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    sw.show_available_configs()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    The available configs are:
    ['neuropixels+mountainsort5.yaml', 'my_config.yaml', 'neuropixels+kilosort2_5.yaml']




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Continue reading below to create and save your own pipeline configs.

.. GENERATED FROM PYTHON SOURCE LINES 67-71

``configs`` as a dictionary
---------------------------
Custom preprocessing and sorting settings can be defined in a dictionary,
with the keys ``preprocessing`` and ``sorting``.

.. GENERATED FROM PYTHON SOURCE LINES 71-85

.. code-block:: Python


    config_dict = {
        "preprocessing": {
            "1": ["phase_shift", {}],
            "2": ["bandpass_filter", {"freq_min": 300, "freq_max": 6000}],
            "3": ["common_reference", {"operator": "median"}]
        },
        "sorting": {
            "kilosort2_5": {'car': False, 'freq_min': 150}}
    }

    # use like:
    # session.preprocess(configs=config_dict, ...)








.. GENERATED FROM PYTHON SOURCE LINES 86-101

.. dropdown:: ``configs`` dictionary structure

    The structure of a ``configs`` dictionary is :
      1. The first level is keys ``"preprocessing"`` and ``"sorting"``
      2. The ``"preprocessing"`` value is a dictionary with string keys,
         with each a number (starting at ``"1"`` and increasing by 1) indicating the order of the preprocessing step.
      3. The value of each preprocessing step is a list, in which the first entry is
         he preprocessing step to run, and the second a dictionary of keyword arguments
         to pass to the function. The preprocessing step name must refer to a
         `SpikeInterface <https://spikeinterface.readthedocs.io/en/stable/api.html>`_. preprocessing function.

Each preprocessing step and arguments map directly onto the underlying
`SpikeInterface functions <https://spikeinterface.readthedocs.io/en/stable/api.html>`_.

To see the currently available preproecssing steps supported by ``spikewrap``, run:

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: Python


    sw.show_supported_preprocessing_steps()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Currently supported preprocessing steps are:
    ['phase_shift', 'bandpass_filter', 'common_reference', 'whiten', 'remove_bad_channels', 'interpolate_bad_channels', 'remove_channels', 'interpolate_channels']




.. GENERATED FROM PYTHON SOURCE LINES 105-107

This configs dict can be saved by ``spikewrap`` along with
a name. Then, this name can be used for in future processing steps.

.. GENERATED FROM PYTHON SOURCE LINES 107-113

.. code-block:: Python


    sw.save_config_dict(config_dict, "my_config")

    # and then:
    # session.preprocess(configs="my_config", ...)








.. GENERATED FROM PYTHON SOURCE LINES 114-118

``configs`` as a YAML file
--------------------------

When the `configs`` dictionary is saved, it is saved as a `.yaml` file.

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: Python


    sw.save_config_dict(config_dict, "my_config")








.. GENERATED FROM PYTHON SOURCE LINES 122-151

By default, this will be written to the ``spikewrap`` storage path so
``"my_config"`` can be used in ``spikewrap`` processing steps, as above.

Use :func:`spikewrap.get_configs_path` to get the path where these are stored.

Alternatively, this can be output to a path of your choice:

.. code-block::

   sw.save_config_dict(config_dict, "my_config", folder="...path_to_folder")

If you have received a pipeline you would like to use, you can load the dictionary, and
then save it the ``spikewrap`` config store for easy use:

.. code-block::

   config_dict = sw.load_config_dict("...path_to_colleagues_config.yaml")
   sw.save_config_dict(config_dict, "colleague_xs_pipeline")

   # Can now run:
   # session.preprocess(configs="colleague_xs_pipeline")

Passing a YAML as a file path
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``spikewrap`` functions will take a path to any valid ``configs`` ``.yaml`` file

.. code-block::

    session.preprocess(config=".../my_config.yaml")

.. GENERATED FROM PYTHON SOURCE LINES 153-154

and we can load ``configs`` from file:

.. GENERATED FROM PYTHON SOURCE LINES 154-162

.. code-block:: Python


    config_dict = sw.load_config_dict(
        sw.get_configs_path() / "neuropixels+kilosort2_5.yaml"
    )

    import json  # use for printing dicts
    print(json.dumps(config_dict, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
        "preprocessing": {
            "1": [
                "phase_shift",
                {}
            ],
            "2": [
                "bandpass_filter",
                {
                    "freq_min": 300,
                    "freq_max": 6000
                }
            ],
            "3": [
                "common_reference",
                {
                    "operator": "median",
                    "reference": "global"
                }
            ]
        },
        "sorting": {
            "kilosort2_5": {
                "car": false,
                "freq_min": 150
            }
        }
    }





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.009 seconds)


.. _sphx_glr_download_gallery_builds_tutorials_02_managing_configs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/neuroinformatics-unit/spikewrap/gh-pages?filepath=notebooks/gallery_builds/tutorials/02_managing_configs.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_managing_configs.ipynb <02_managing_configs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_managing_configs.py <02_managing_configs.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02_managing_configs.zip <02_managing_configs.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
